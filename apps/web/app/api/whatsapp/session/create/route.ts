import { NextRequest, NextResponse } from 'next/server';
import { getSupabaseServerClient } from '@kit/supabase/server-client';
import { requireUser } from '@kit/supabase/require-user';

export async function POST(request: NextRequest) {
  try {
    const client = getSupabaseServerClient();
    const userResult = await requireUser(client);

    // Check if authentication failed
    if (userResult.error) {
      return NextResponse.json(
        { error: 'Authentication required' },
        { status: 401 }
      );
    }

    const user = userResult.data;
    const body = await request.json();
    const { sessionName } = body;

    if (!sessionName || typeof sessionName !== 'string') {
      return NextResponse.json(
        { error: 'Session name is required' },
        { status: 400 }
      );
    }

    // Check if session name already exists for this user
    const { data: existingSession } = await client
      .from('whatsapp_sessions')
      .select('id')
      .eq('account_id', user.id)
      .eq('session_name', sessionName)
      .single();

    if (existingSession) {
      return NextResponse.json(
        { error: 'Session name already exists' },
        { status: 409 }
      );
    }

    // Create new WhatsApp session
    const { data: session, error } = await client
      .from('whatsapp_sessions')
      .insert({
        account_id: user.id,
        session_name: sessionName,
        status: 'connecting',
        qr_code: null, // Will be generated by WhatsApp Web JS
      })
      .select()
      .single();

    if (error) {
      console.error('Error creating WhatsApp session:', error);
      return NextResponse.json(
        { error: 'Failed to create session' },
        { status: 500 }
      );
    }

    // TODO: Initialize WhatsApp Web JS client here
    // For now, we'll just return the session
    
    return NextResponse.json({ 
      session,
      message: 'Session created successfully. QR code will be generated shortly.' 
    });
  } catch (error) {
    console.error('Error in WhatsApp session create API:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
